@model LanAdept.Views.Tournaments.ModelController.TournamentModel

@{
	ViewBag.Title = "Tournoi de " + Model.Game.Name;
}
<h1>
	@ViewBag.test
</h1>


<div>

	@if (!string.IsNullOrWhiteSpace(TempData["Error"] as string))
	{
		<div class="alert alert-danger" role="alert">
			@Html.Raw(TempData["Error"])
		</div>
	}
	@if (!string.IsNullOrWhiteSpace(TempData["Success"] as string))
	{
		<div class="alert alert-success" role="alert">
			@Html.Raw(TempData["Success"])
		</div>
	}

	@if (Model.IsOver)
	{
		<div class="alert alert-danger">Le tournoi est présentement terminé</div>
	}
	else if (Model.IsStarted)
	{
		<div class="alert alert-success">Le tournoi est présentement commencé</div>
	}


	<div class="page-header clearfix">
		<h1 class="pull-left">Tournoi de @Html.DisplayFor(model => model.Game.Name)</h1>


		@if (Model.IsConnected && !Model.IsStarted && !Model.IsOver && Model.CanAddTeam)
		{
			<br />
			<div class="btn-toolbar pull-right">
				<div class="btn-group">
					@Html.ActionLink("Créer mon équipe", "AddTeam", new { id = Model.TournamentID }, new { @class = "btn btn-success" })
				</div>
			</div>
		}
	</div>
	@if (Model.Info != null)
	{
		<h3>Informations et règlements</h3>
		<div>
			@Html.Markdown(Model.Info)
		</div>
		<hr />
		<h4>Équipes</h4>
	}

	@if (Model.Teams.Count() > 0)
	{

		using (Html.BeginForm("JoinTeam", "Tournament", new LanAdept.Views.Tournaments.ModelController.JoinTeamModel() { TournamentID = Model.TournamentID }))
		{
			@Html.Hidden("GamerTagID", 0, new { id = "tagInput" })
			@Html.Hidden("TeamID", 0, new { id = "teamInput" })

			if (Model.IsConnected)
			{
				@Html.Partial("ModalChoisirGamerTag", Model.GamerTags)
				@Html.Partial("ModalChoisirGamerTagFooterRejoindre")
			}

			<div class="table-responsive">
				<table class="table table-striped">
					<thead>
						<tr>
							<th>Équipes</th>
							<th>Membres</th>
							<th class="text-center">Nombre de joueur</th>
							@if (Model.IsConnected)
							{
								<th></th>
							}
						</tr>
					</thead>
					@foreach (LanAdept.Views.Tournaments.ModelController.TeamModel team in Model.Teams)
					{
						<tr>
							<td>
								@if (!string.IsNullOrWhiteSpace(team.Tag))
								{
									<span class="text-muted">[@team.Tag.ToUpper()]</span>
								}
								@team.Name
							</td>
							<td>
								@foreach (GamerTag gamerTag in team.Gamertags)
								{
									<div>
										@if (gamerTag == team.TeamLeaderTag)
										{
											@gamerTag.Gamertag <span class="glyphicon glyphicon-star"></span>
										}
										else
										{
											@gamerTag.Gamertag
										}
									</div>
								}
							</td>
							<td class="text-center">
								@if (team.Gamertags.Count() == Model.MaxPlayerPerTeam)
								{
									<span class="text-success">
										@team.Gamertags.Count() / @Model.MaxPlayerPerTeam
									</span>
								}
								else
								{
									@team.Gamertags.Count() <text>/</text> @Model.MaxPlayerPerTeam
								}
							</td>
							@if (Model.IsConnected)
							{
								<td>
									<div class="pull-right">
										@if (!Model.IsOver && !Model.IsStarted)
										{
											if (team.IsMyTeamForTeamLeader)
											{
												@Html.ActionLink("Gérer", "Details", "Team", new { id = team.TeamID }, new { @class = "btn btn-primary" })
											}
											else if (team.IsMyTeam)
											{
												@Html.ActionLink("Quitter", "LeaveTeam", "Team", new { id = team.TeamID }, new { @class = "btn btn-danger" })
											}
											else if (team.IsTeamDemande)
											{
												@Html.ActionLink("Annuler ma demande", "CancelDemande", "Team", new { id = team.TeamID }, new { @class = "btn btn-danger" })
											}
											else if (team.Gamertags.Count() < Model.MaxPlayerPerTeam && !Model.IsTeamLeader && Model.UserTeam == null)
											{
												<button class="teamButton hover btn btn-default" type="button" data-toggle="modal" data-team-id="@team.TeamID" data-target="#ModalChoisirGamerTag">Rejoindre</button>
											}
										}

									</div>
								</td>
							}
						</tr>
					}
				</table>
			</div>
		}
	}
	else
	{
		<div class="alert alert-warning">Il n'y a présentement aucune équipes inscrites à ce tournoi</div>
	}
</div>

@Html.TextIconActionLink("Retour", "glyphicon-arrow-left", "Index", null, null, new { @class = "btn btn-default" })

@section scripts {
	<script>
		$(document).ready(function () {

			$('.teamButton').click(function () {
				$('.teamActive').removeClass('teamActive');
				$(this).addClass('teamActive');
			})

			$('.tagItem').click(selectGamerTag);

			$('#actionButton').click(function (event) {
				if (!$('.tagItem').hasClass('active'))
					event.preventDefault();
				else {
					$(this).button('loading');
					$('#teamInput').val($('.teamActive').attr('data-team-id'));
					$('#tagInput').val($('.active').attr('data-tag-id'));
				}
			})

			$('.addGamertag').click(function (event) {
				$.ajax({
					method: "POST",
					url: "@Url.Action("AddGamerTag")",
					data: { gamertag: $('#gamerTagText').val() }
				}).done(function (data) {
					console.log(data);
					if (!data.HasError) {
						var element = $('<a href="#" class="tagItem list-group-item" data-tag-id="' + data.GamerTagID + '">' + data.Gamertag + '</a>')
						$('#listGamerTag').append(element);
						element.click(selectGamerTag);
					}
				})
			});

			$('#ModalChoisirGamerTag').on('show.bs.modal', function (event) {
				var button = $(event.relatedTarget);
				var modal = $(this);

				modal.find('#actionButton').text('Rejoindre');
			});

			function selectGamerTag() {
				$('#GamerTagID').val($(this).attr('data-tag-id'));
				$('.active').removeClass('active');
				$(this).addClass('active');
				if ($('#actionButton').hasClass('disabled'))
					$('#actionButton').removeClass('disabled');
			}
		})
	</script>
}

@section Styles {
	@Styles.Render("~/Content/Tournois.css")
}

