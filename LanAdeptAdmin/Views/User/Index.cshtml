@model IPagedList<User>
@using PagedList.Mvc;
@using PagedList;


@{
	ViewBag.Title = "Liste des utilisateurs";
	ViewBag.Sidebar = "_Sidebar_User";
	
	int from = (Model.PageNumber - 1) * Model.PageSize;
	int to = from + Model.Count;
	
	PagedListRenderOptions renderOptions = PagedListRenderOptions.OnlyShowFivePagesAtATime;
	renderOptions.DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded;
	renderOptions.DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded;
}

<h2>Liste des utilisateurs</h2>
<hr />

@if (!string.IsNullOrWhiteSpace(TempData["Error"] as string))
{
	<div class="alert alert-danger" role="alert">
		@Html.Raw(TempData["Error"])
	</div>
}
@if (!string.IsNullOrWhiteSpace(TempData["Success"] as string))
{
	<div class="alert alert-success" role="alert">
		@Html.Raw(TempData["Success"])
	</div>
}

<div class="table-responsive">
	<table class="table">
		<thead>
			<tr>
				<th>
					@Html.ActionLink("Nom complet", "Index", new { sortOrder = ViewBag.NameSortParm })
				</th>
				<th>
					@Html.ActionLink("Email", "Index", new { sortOrder = ViewBag.EmailSortParm })
				</th>
				<th>
					@Html.ActionLink("Rôle", "Index", new { sortOrder = ViewBag.RoleSortParm })
				</th>
				<th class="text-center">
					@Html.ActionLink("Place", "Index", new { sortOrder = ViewBag.PlaceSortParm })
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var user in Model)
			{

				<tr data-row-url="@Url.Action("Details", new { id = user.Id })" class="clickable-row">
					<td>
						@Html.DisplayFor(modelItem => user.CompleteName)
					</td>
					<td>
						@user.Email
					</td>
					<td>
						@*@Html.DisplayFor(modelItem => user.Role.Name)*@
                        TODO
					</td>
					<td class="text-center">
						@if (LanAdeptCore.Service.ReservationService.HasUserPlace(user))
						{
							@user.LastReservation.Place
						}
						else
						{
							<text> -- </text>
						}
					</td>
				</tr>

			}
		</tbody>
	</table>
</div>

De @from à @to sur @Model.TotalItemCount

@if (Model.PageCount > 1)
{
	<br />	
	
	@Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }), renderOptions)
}
